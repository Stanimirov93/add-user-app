{"ast":null,"code":"import _slicedToArray from\"/Users/angelstanimirov/ReactJS_Projects/add-user-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useRef}from\"react\";// No point in using useState just to read values on every key stroke.\n// Ref hooker is better for this.\n// Ref = less code than State, but State is cleaner and components are controlled instead of uncontrolled,\n// because we are feeding values with every stroke to the value attribute in the input.\nimport Card from\"../UI/Card\";import Button from\"../UI/Button\";import ErrorModal from\"../UI/ErrorModal\";import classes from\"./AddUser.module.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddUser=function AddUser(props){var nameInputRef=useRef();// Holding the default name input stored as value when clicking the form button.\nvar ageInputRef=useRef();var _useState=useState(),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var addUserHandler=function addUserHandler(event){event.preventDefault();console.log(nameInputRef.current.value);console.log(ageInputRef.current.value);var enteredUserName=nameInputRef.current.value;var enteredUserAge=ageInputRef.current.value;if(enteredUserName.trim().length===0||enteredUserAge.trim().length===0){setError({title:\"Invalid input\",message:\"Please enter a valid name and age (non-empty values).\"});return;}// Check if something is entered inside the inputs before continuing.\nif(+enteredUserAge<1){setError({title:\"Invalid age.\",message:\"Please enter a valid age (> 0).\"});return;}console.log(enteredUserName,enteredUserAge);props.onAddUser(enteredUserName,enteredUserAge);// Calling the \"addUserHandler\" function from App.js\n// And passing these stored values from the \"addUserHandler\" function here to there.\nnameInputRef.current.value=\"\";// Resetting the form input name value.\nageInputRef.current.value=\"\";// Not a good idea to do this, but it's ok.\n};var errorHandler=function errorHandler(){setError(null);};return/*#__PURE__*/_jsxs(React.Fragment,{children:[//If there is error display this:\nerror&&/*#__PURE__*/_jsx(ErrorModal,{title:error.title,message:error.message,onConfirm:errorHandler}),/*#__PURE__*/_jsx(Card,{className:classes.input,children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:addUserHandler,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{id:\"username\",type:\"text\",ref:nameInputRef}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"age\",children:\"Age (Years)\"}),/*#__PURE__*/_jsx(\"input\",{id:\"age\",type:\"number\",ref:ageInputRef}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Add User\"})]})})]});};export default AddUser;","map":{"version":3,"sources":["/Users/angelstanimirov/ReactJS_Projects/add-user-app/src/components/Users/AddUser.js"],"names":["React","useState","useRef","Card","Button","ErrorModal","classes","AddUser","props","nameInputRef","ageInputRef","error","setError","addUserHandler","event","preventDefault","console","log","current","value","enteredUserName","enteredUserAge","trim","length","title","message","onAddUser","errorHandler","input"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,KAAwC,OAAxC,CAAiD;AACjD;AACA;AACA;AAEA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,C,wFAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzB,GAAMC,CAAAA,YAAY,CAAGP,MAAM,EAA3B,CAA+B;AAC/B,GAAMQ,CAAAA,WAAW,CAAGR,MAAM,EAA1B,CAEA,cAA0BD,QAAQ,EAAlC,wCAAOU,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAChCA,KAAK,CAACC,cAAN,GACAC,OAAO,CAACC,GAAR,CAAYR,YAAY,CAACS,OAAb,CAAqBC,KAAjC,EACAH,OAAO,CAACC,GAAR,CAAYP,WAAW,CAACQ,OAAZ,CAAoBC,KAAhC,EAEA,GAAMC,CAAAA,eAAe,CAAGX,YAAY,CAACS,OAAb,CAAqBC,KAA7C,CACA,GAAME,CAAAA,cAAc,CAAGX,WAAW,CAACQ,OAAZ,CAAoBC,KAA3C,CAEA,GACEC,eAAe,CAACE,IAAhB,GAAuBC,MAAvB,GAAkC,CAAlC,EACAF,cAAc,CAACC,IAAf,GAAsBC,MAAtB,GAAiC,CAFnC,CAGE,CACAX,QAAQ,CAAC,CACPY,KAAK,CAAE,eADA,CAEPC,OAAO,CAAE,uDAFF,CAAD,CAAR,CAIA,OACD,CAAC;AAEF,GAAI,CAACJ,cAAD,CAAkB,CAAtB,CAAyB,CACvBT,QAAQ,CAAC,CACPY,KAAK,CAAE,cADA,CAEPC,OAAO,CAAE,iCAFF,CAAD,CAAR,CAIA,OACD,CAEDT,OAAO,CAACC,GAAR,CAAYG,eAAZ,CAA6BC,cAA7B,EACAb,KAAK,CAACkB,SAAN,CAAgBN,eAAhB,CAAiCC,cAAjC,EAAkD;AAClD;AAEAZ,YAAY,CAACS,OAAb,CAAqBC,KAArB,CAA6B,EAA7B,CAAiC;AACjCT,WAAW,CAACQ,OAAZ,CAAoBC,KAApB,CAA4B,EAA5B,CAAgC;AACjC,CAjCD,CAmCA,GAAMQ,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzBf,QAAQ,CAAC,IAAD,CAAR,CACD,CAFD,CAIA,mBACE,MAAC,KAAD,CAAO,QAAP,YAEI;AACAD,KAAK,eACH,KAAC,UAAD,EACE,KAAK,CAAEA,KAAK,CAACa,KADf,CAEE,OAAO,CAAEb,KAAK,CAACc,OAFjB,CAGE,SAAS,CAAEE,YAHb,EAJN,cAWE,KAAC,IAAD,EAAM,SAAS,CAAErB,OAAO,CAACsB,KAAzB,uBACE,cAAM,QAAQ,CAAEf,cAAhB,wBACE,cAAO,OAAO,CAAC,UAAf,sBADF,cAEE,cAAO,EAAE,CAAC,UAAV,CAAqB,IAAI,CAAC,MAA1B,CAAiC,GAAG,CAAEJ,YAAtC,EAFF,cAGE,cAAO,OAAO,CAAC,KAAf,yBAHF,cAIE,cAAO,EAAE,CAAC,KAAV,CAAgB,IAAI,CAAC,QAArB,CAA8B,GAAG,CAAEC,WAAnC,EAJF,cAKE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,sBALF,GADF,EAXF,GADF,CAuBD,CApED,CAsEA,cAAeH,CAAAA,OAAf","sourcesContent":["import React, { useState, useRef } from \"react\"; // No point in using useState just to read values on every key stroke.\n// Ref hooker is better for this.\n// Ref = less code than State, but State is cleaner and components are controlled instead of uncontrolled,\n// because we are feeding values with every stroke to the value attribute in the input.\n\nimport Card from \"../UI/Card\";\nimport Button from \"../UI/Button\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport classes from \"./AddUser.module.css\";\n\nconst AddUser = (props) => {\n  const nameInputRef = useRef(); // Holding the default name input stored as value when clicking the form button.\n  const ageInputRef = useRef();\n\n  const [error, setError] = useState();\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n    console.log(nameInputRef.current.value);\n    console.log(ageInputRef.current.value);\n\n    const enteredUserName = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value;\n\n    if (\n      enteredUserName.trim().length === 0 ||\n      enteredUserAge.trim().length === 0\n    ) {\n      setError({\n        title: \"Invalid input\",\n        message: \"Please enter a valid name and age (non-empty values).\",\n      });\n      return;\n    } // Check if something is entered inside the inputs before continuing.\n\n    if (+enteredUserAge < 1) {\n      setError({\n        title: \"Invalid age.\",\n        message: \"Please enter a valid age (> 0).\",\n      });\n      return;\n    }\n\n    console.log(enteredUserName, enteredUserAge);\n    props.onAddUser(enteredUserName, enteredUserAge); // Calling the \"addUserHandler\" function from App.js\n    // And passing these stored values from the \"addUserHandler\" function here to there.\n\n    nameInputRef.current.value = \"\"; // Resetting the form input name value.\n    ageInputRef.current.value = \"\"; // Not a good idea to do this, but it's ok.\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    <React.Fragment>\n      {\n        //If there is error display this:\n        error && (\n          <ErrorModal\n            title={error.title}\n            message={error.message}\n            onConfirm={errorHandler}\n          />\n        )\n      }\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          <label htmlFor=\"username\">Username</label>\n          <input id=\"username\" type=\"text\" ref={nameInputRef} />\n          <label htmlFor=\"age\">Age (Years)</label>\n          <input id=\"age\" type=\"number\" ref={ageInputRef} />\n          <Button type=\"submit\">Add User</Button>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default AddUser;\n"]},"metadata":{},"sourceType":"module"}